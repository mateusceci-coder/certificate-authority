services:
  postgres:
    image: "postgres:latest"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-fake-bry}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-fake-bry}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} -h localhost",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  certificates:
    build: ./certs
    volumes:
      - certs:/certs
    container_name: cert-generator
    networks:
      - app-network

  springboot:
    build: ./app
    depends_on:
      - postgres
    volumes:
      - certs:/certs
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -qO- http://localhost:8080/api/ca-info | grep -q 'success' || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 10

  nginx:
    build:
      context: .
      dockerfile: nginx/Dockerfile
    depends_on:
      - springboot
    ports:
      - "80:80"
    volumes:
      - certs:/certs:ro
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -qO- http://localhost/ | grep -q '<!DOCTYPE html>' || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app-network:
    driver: bridge

volumes:
  certs:
  postgres_data:
